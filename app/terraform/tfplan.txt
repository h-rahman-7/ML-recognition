[0m[1mmodule.ecs.data.aws_iam_role.ecs_task_execution_role: Reading...[0m[0m
[0m[1mmodule.ecs.data.aws_ecr_repository.repo: Reading...[0m[0m
[0m[1mmodule.route53.data.aws_route53_zone.cgai_zone: Reading...[0m[0m
[0m[1mmodule.ecs.data.aws_iam_role.ecs_task_execution_role: Read complete after 0s [id=ecs-task-execution-role][0m
[0m[1mmodule.route53.data.aws_route53_zone.cgai_zone: Read complete after 1s [id=Z09839262WL8AOYXDJ5FB][0m
[0m[1mmodule.ecs.data.aws_ecr_repository.repo: Read complete after 1s [id=chess-game][0m
[0m[1mmodule.ecs.data.aws_ecr_image.latest_image: Reading...[0m[0m
[0m[1mmodule.ecs.data.aws_ecr_image.latest_image: Read complete after 0s [id=sha256:0d5fb52fabe105ccd622d92cae0ce70fb782ceb4fafa8364d336aac7a25b39aa][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_s3_bucket_policy.chess_game_state_bucket_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "chess_game_state_bucket_policy" {
      [32m+[0m[0m bucket = "chess-game-terraform-state"
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "s3:PutObject"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m ArnLike      = {
                              [32m+[0m[0m "aws:SourceArn" = "arn:aws:elasticloadbalancing:*:713881828888:loadbalancer/*"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:SourceAccount" = "713881828888"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "elasticloadbalancing.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "arn:aws:s3:::chess-game-terraform-state/*"
                      [32m+[0m[0m Sid       = "ELBAccessLogsPolicy"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
    }

[1m  # module.alb.aws_lb.cg_app_lb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "cg_app_lb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = true
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "cg-app-alb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Environment" = "production"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Environment" = "production"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)

      [32m+[0m[0m subnet_mapping (known after apply)
    }

[1m  # module.alb.aws_lb_listener.cg_http_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "cg_http_listener" {
      [32m+[0m[0m arn                                                                   = (known after apply)
      [32m+[0m[0m id                                                                    = (known after apply)
      [32m+[0m[0m load_balancer_arn                                                     = (known after apply)
      [32m+[0m[0m port                                                                  = 80
      [32m+[0m[0m protocol                                                              = "HTTP"
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_max_age_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_content_security_policy_header_value            = (known after apply)
      [32m+[0m[0m routing_http_response_server_enabled                                  = (known after apply)
      [32m+[0m[0m routing_http_response_strict_transport_security_header_value          = (known after apply)
      [32m+[0m[0m routing_http_response_x_content_type_options_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_x_frame_options_header_value                    = (known after apply)
      [32m+[0m[0m ssl_policy                                                            = (known after apply)
      [32m+[0m[0m tags_all                                                              = (known after apply)
      [32m+[0m[0m tcp_idle_timeout_seconds                                              = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order = (known after apply)
          [32m+[0m[0m type  = "redirect"

          [32m+[0m[0m redirect {
              [32m+[0m[0m host        = "#{host}"
              [32m+[0m[0m path        = "/#{path}"
              [32m+[0m[0m port        = "443"
              [32m+[0m[0m protocol    = "HTTPS"
              [32m+[0m[0m query       = "#{query}"
              [32m+[0m[0m status_code = "HTTP_301"
            }
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # module.alb.aws_lb_listener.cg_https_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "cg_https_listener" {
      [32m+[0m[0m arn                                                                   = (known after apply)
      [32m+[0m[0m certificate_arn                                                       = "arn:aws:acm:us-east-1:713881828888:certificate/2c9a27e7-a2dd-4a9b-bf4d-f31c8ca34ef9"
      [32m+[0m[0m id                                                                    = (known after apply)
      [32m+[0m[0m load_balancer_arn                                                     = (known after apply)
      [32m+[0m[0m port                                                                  = 443
      [32m+[0m[0m protocol                                                              = "HTTPS"
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_max_age_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_content_security_policy_header_value            = (known after apply)
      [32m+[0m[0m routing_http_response_server_enabled                                  = (known after apply)
      [32m+[0m[0m routing_http_response_strict_transport_security_header_value          = (known after apply)
      [32m+[0m[0m routing_http_response_x_content_type_options_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_x_frame_options_header_value                    = (known after apply)
      [32m+[0m[0m ssl_policy                                                            = "ELBSecurityPolicy-TLS-1-2-2017-01"
      [32m+[0m[0m tags_all                                                              = (known after apply)
      [32m+[0m[0m tcp_idle_timeout_seconds                                              = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # module.alb.aws_lb_target_group.cg_app_lb_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "cg_app_lb_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "cg-target-group"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 3003
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 3
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 2
        }

      [32m+[0m[0m stickiness (known after apply)

      [32m+[0m[0m target_failover (known after apply)

      [32m+[0m[0m target_group_health (known after apply)

      [32m+[0m[0m target_health_state (known after apply)
    }

[1m  # module.ecs.aws_ecs_cluster.cg_ecs_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "cg_ecs_cluster" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "cg-ecs-cluster"
      [32m+[0m[0m tags_all = (known after apply)

      [32m+[0m[0m setting {
          [32m+[0m[0m name  = "containerInsights"
          [32m+[0m[0m value = "enabled"
        }
    }

[1m  # module.ecs.aws_ecs_service.cg_app_service[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_service" "cg_app_service" {
      [32m+[0m[0m availability_zone_rebalancing      = "DISABLED"
      [32m+[0m[0m cluster                            = (known after apply)
      [32m+[0m[0m deployment_maximum_percent         = 200
      [32m+[0m[0m deployment_minimum_healthy_percent = 100
      [32m+[0m[0m desired_count                      = 1
      [32m+[0m[0m enable_ecs_managed_tags            = false
      [32m+[0m[0m enable_execute_command             = false
      [32m+[0m[0m iam_role                           = (known after apply)
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m launch_type                        = "FARGATE"
      [32m+[0m[0m name                               = "my-cg-service"
      [32m+[0m[0m platform_version                   = (known after apply)
      [32m+[0m[0m scheduling_strategy                = "REPLICA"
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m task_definition                    = (known after apply)
      [32m+[0m[0m triggers                           = (known after apply)
      [32m+[0m[0m wait_for_steady_state              = false

      [32m+[0m[0m deployment_controller {
          [32m+[0m[0m type = "ECS"
        }

      [32m+[0m[0m load_balancer {
          [32m+[0m[0m container_name   = "cg-container"
          [32m+[0m[0m container_port   = 3003
          [32m+[0m[0m target_group_arn = (known after apply)
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m network_configuration {
          [32m+[0m[0m assign_public_ip = true
          [32m+[0m[0m security_groups  = (known after apply)
          [32m+[0m[0m subnets          = (known after apply)
        }
    }

[1m  # module.ecs.aws_ecs_task_definition.cg_app_td[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "cg_app_td" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m arn_without_revision     = (known after apply)
      [32m+[0m[0m container_definitions    = jsonencode(
            [
              [32m+[0m[0m {
                  [32m+[0m[0m essential    = true
                  [32m+[0m[0m image        = "713881828888.dkr.ecr.us-east-1.amazonaws.com/chess-game@sha256:0d5fb52fabe105ccd622d92cae0ce70fb782ceb4fafa8364d336aac7a25b39aa"
                  [32m+[0m[0m name         = "cg-container"
                  [32m+[0m[0m portMappings = [
                      [32m+[0m[0m {
                          [32m+[0m[0m containerPort = 3003
                          [32m+[0m[0m hostPort      = 3003
                          [32m+[0m[0m protocol      = "tcp"
                        },
                    ]
                },
            ]
        )
      [32m+[0m[0m cpu                      = "2048"
      [32m+[0m[0m execution_role_arn       = "arn:aws:iam::713881828888:role/ecs-task-execution-role"
      [32m+[0m[0m family                   = "cg-task"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "6144"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m skip_destroy             = false
      [32m+[0m[0m tags_all                 = (known after apply)
      [32m+[0m[0m task_role_arn            = "arn:aws:iam::713881828888:role/ecs-task-execution-role"
      [32m+[0m[0m track_latest             = false
    }

[1m  # module.ecs.aws_iam_role_policy_attachment.ecs_task_execution_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      [32m+[0m[0m role       = "ecs-task-execution-role"
    }

[1m  # module.route53.aws_route53_record.cgai_cname_record[0m will be created
[0m  [32m+[0m[0m resource "aws_route53_record" "cgai_cname_record" {
      [32m+[0m[0m allow_overwrite = (known after apply)
      [32m+[0m[0m fqdn            = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m name            = "cgai.habibur-rahman.com"
      [32m+[0m[0m records         = (known after apply)
      [32m+[0m[0m ttl             = 300
      [32m+[0m[0m type            = "CNAME"
      [32m+[0m[0m zone_id         = "Z09839262WL8AOYXDJ5FB"
    }

[1m  # module.security_group.aws_security_group.cg_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cg_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for ECS container"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow all outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow ECS traffic from anywhere"
              [32m+[0m[0m from_port        = 3003
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3003
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow public HTTPS traffic"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
        ]
      [32m+[0m[0m name                   = "cg-ecs-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "cg-ecs-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "cg-ecs-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_acm_certificate.cert[0m will be created
[0m  [32m+[0m[0m resource "aws_acm_certificate" "cert" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m domain_name               = "cgai.habibur-rahman.com"
      [32m+[0m[0m domain_validation_options = [
          [32m+[0m[0m {
              [32m+[0m[0m domain_name           = "cgai.habibur-rahman.com"
              [32m+[0m[0m resource_record_name  = (known after apply)
              [32m+[0m[0m resource_record_type  = (known after apply)
              [32m+[0m[0m resource_record_value = (known after apply)
            },
        ]
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m key_algorithm             = (known after apply)
      [32m+[0m[0m not_after                 = (known after apply)
      [32m+[0m[0m not_before                = (known after apply)
      [32m+[0m[0m pending_renewal           = (known after apply)
      [32m+[0m[0m renewal_eligibility       = (known after apply)
      [32m+[0m[0m renewal_summary           = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m subject_alternative_names = [
          [32m+[0m[0m "cgai.habibur-rahman.com",
        ]
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name" = "ecs-cert"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name" = "ecs-cert"
        }
      [32m+[0m[0m type                      = (known after apply)
      [32m+[0m[0m validation_emails         = (known after apply)
      [32m+[0m[0m validation_method         = "DNS"

      [32m+[0m[0m options (known after apply)
    }

[1m  # module.vpc.aws_default_security_group.restrict_default_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_default_security_group" "restrict_default_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = (known after apply)
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow all outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "Block all inbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "cg-vpc-default-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "cg-vpc-default-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.cg_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "cg_igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "$(var.vpc_name)-igw"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "$(var.vpc_name)-igw"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_route_table.cg_rt[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "cg_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "cg-vpc}-rt"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "cg-vpc}-rt"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.cg_subnet_rt_assoc[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "cg_subnet_rt_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.cg_subnet_rt_assoc[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "cg_subnet_rt_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.cg_private_sn[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "cg_private_sn" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "cg-private-sn"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "cg-private-sn"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.cg_public_sn[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "cg_public_sn" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "cg-vpc-public-1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "cg-vpc-public-1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.cg_public_sn[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "cg_public_sn" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "cg-vpc-public-2"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "cg-vpc-public-2"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.cg_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "cg_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "cg-vpc"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "cg-vpc"
        }
    }

[1mPlan:[0m 21 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb_arn            = (known after apply)
  [32m+[0m[0m alb_url            = (known after apply)
  [32m+[0m[0m ecs_cluster_id     = (known after apply)
  [32m+[0m[0m http_listener_arn  = (known after apply)
  [32m+[0m[0m https_listener_arn = (known after apply)
  [32m+[0m[0m route53_record     = {
      [32m+[0m[0m alias                            = []
      [32m+[0m[0m allow_overwrite                  = (known after apply)
      [32m+[0m[0m cidr_routing_policy              = []
      [32m+[0m[0m failover_routing_policy          = []
      [32m+[0m[0m fqdn                             = (known after apply)
      [32m+[0m[0m geolocation_routing_policy       = []
      [32m+[0m[0m geoproximity_routing_policy      = []
      [32m+[0m[0m health_check_id                  = [90mnull[0m[0m
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m latency_routing_policy           = []
      [32m+[0m[0m multivalue_answer_routing_policy = [90mnull[0m[0m
      [32m+[0m[0m name                             = "cgai.habibur-rahman.com"
      [32m+[0m[0m records                          = (known after apply)
      [32m+[0m[0m set_identifier                   = [90mnull[0m[0m
      [32m+[0m[0m ttl                              = 300
      [32m+[0m[0m type                             = "CNAME"
      [32m+[0m[0m weighted_routing_policy          = []
      [32m+[0m[0m zone_id                          = "Z09839262WL8AOYXDJ5FB"
    }
  [32m+[0m[0m target_group_arn   = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tf.plan

To perform exactly these actions, run the following command to apply:
    terraform apply "tf.plan"
